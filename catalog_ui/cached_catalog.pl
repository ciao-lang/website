% Automatically generated, see gen_catalog/0
bundle(lpdoc).
info(lpdoc,tags([main])).
info(lpdoc,title("Documentation Generator")).
info(lpdoc,desc("# Documentation Generator

`lpdoc` is an *automatic program documentation generator* for (C)LP
systems.

`lpdoc` generates documentation from one or more source files for a
logic program (including ISO-Prolog, Ciao, and other CLP). It is
particularly useful for documenting library modules, for which it
automatically generates a description of the module interface. `lpdoc`
can also be used quite successfully to document full applications and
to format single documentation files.

The quality of the documentation generated can be greatly enhanced by
including within the program text:

 - *assertions* (types, modes, etc. ...) for the predicates in
   the program, and 
 - *machine-readable comments* (in the ``literate programming''
   style).

The assertions and comments included in the source file need to be
written using the Ciao system *assertion language*.

`lpdoc` can generate documentation in multiple formats, including
@tt{HTML}, @tt{pdf}, @tt{info}, and @tt{ascii}.

`lpdoc` is distributed under the GNU general public license.
")).
info(lpdoc,manuals(lpdoc,'lpdoc.html')).
info(lpdoc,manuals(lpdoc_devel,'lpdoc_devel.html')).
info(lpdoc,url('https://github.com/ciao-lang/lpdoc')).
bundle(ciaopp).
info(ciaopp,tags([main])).
info(ciaopp,title("The CiaoPP Program Processor")).
info(ciaopp,desc("# The CiaoPP Program Processor

CiaoPP is a program processor framework for
[Ciao](https://github.com/ciao-lang/ciao). CiaoPP performs a number of
program debugging, analysis, and source-to-source transformation
tasks:

 - **Inference of properties** of the predicates and literals of the
   program (*types*, *modes* and other *variable instantiation*
   properties, *non-failure*, *determinacy*, bounds on *computational
   cost*, bounds on *sizes of terms* in the program, etc.).

 - Certain kinds of **static debugging** and **verification**, finding
   errors before running the program. This includes checking how
   programs call system library predicates and also *checking the
   assertions* present in the program or in other modules used by the
   program. Such assertions represent essentially partial
   *specifications* of the program.

 - Several kinds of source to source **program transformations** such
   as *program specialization*, *slicing*, *partial evaluation*,
   *program parallelization* (taking *granularity control* into
   account), inclusion of *run-time tests* for assertions which cannot
   be checked completely at compile-time, etc.

The information generated by analysis and the assertions in the
specifications are all written in the same *assertion language*, which
is in turn also used by the Ciao system documentation generator,
`lpdoc`.

This repository contains the generic preprocessor framework together
with some basic analyses, transformations, and language support. Other
features (including support for a variety of programming languages)
are distributed as separate bundles. 

CiaoPP is distributed under the GNU general public license.
")).
info(ciaopp,deps(ciaodbg)).
info(ciaopp,deps(ciaopp_testgen)).
info(ciaopp,deps(typeslib)).
info(ciaopp,deps(ciao_ppl)).
info(ciaopp,deps(ciao_gsl)).
info(ciaopp,deps(ciaopp_fpnum)).
info(ciaopp,deps(ciaopp_bshare)).
info(ciaopp,deps(ciaopp_llvm)).
info(ciaopp,deps(davinci)).
info(ciaopp,manuals(ciaopp,'ciaopp.html')).
info(ciaopp,manuals(ciaopp_tutorials,'ciaopp_tutorials.html')).
info(ciaopp,url('https://github.com/ciao-lang/ciaopp')).
bundle(ciao_emacs).
info(ciao_emacs,tags([main])).
info(ciao_emacs,title("The Ciao mode for Emacs")).
info(ciao_emacs,desc("# The Ciao mode for Emacs

This is an emacs mode that provides syntax highlighting (font-lock),
indentation, source-level debugging and location of errors in source
files, access to manuals, maintenance of changelogs, and other
editing, compiling, running, and debugging facilities for Ciao
programs.

It offers a rich, integrated user interface to the Ciao program
development environment components, including the `ciaosh` interactive
top level and the `ciaopp` preprocessor.
")).
info(ciao_emacs,url('https://github.com/ciao-lang/ciao_emacs')).
bundle(lpmake).
info(lpmake,tags([])).
info(lpmake,manuals(lpmake,'lpmake.html')).
info(lpmake,url('https://github.com/ciao-lang/lpmake')).
bundle(yap_libs).
info(yap_libs,tags([])).
info(yap_libs,title("Yap libraries for Commons")).
info(yap_libs,desc("# Yap libraries for Commons

These are a preliminary collection of libraries contributed from Yap
to Prolog Commons.

The modules use the `library(dialect/yap)` compatibility mode.
")).
info(yap_libs,url('https://github.com/ciao-lang/yap_libs')).
bundle(ciao_playground).
info(ciao_playground,tags([])).
info(ciao_playground,title("The Ciao Playground")).
info(ciao_playground,desc("# The Ciao Playground

This bundle implements the Ciao Playground. It supports local
(browser-side) execution of Ciao code based on `ciaowasm` and offers a
code edition based on the [Monaco Editor](https://microsoft.github.io/monaco-editor/) component.

`ciaowasm` is a Ciao engine compiled to the WebAssembly platform using
[Emscripten](https://emscripten.org), together with a JavaScript
client layer.

## Build instructions

Steps to build this bundle:

 - Install the `ciaowasm` bundle (see `ciaowasm/README.md`)
 - Install external dependencies: `ciao custom_run ciao_playground fetch_externals`
   (which use [NPM](https://www.npmjs.com/))
 - Prepare and pack bundles at the `build/site/` area:
```
ciao install --grade=wasm ciaowasm # (if not done before)
ciao install --grade=wasm core
ciao install --grade=wasm builder
ciao install --grade=wasm ciaodbg
ciao install ciao_playground # (wasm grade not needed)
```
 - Finish the distribution at `build/site/`:
```
ciao custom_run ciao_playground dist
```

You may use the `build.sh` to automate all the steps.

## Usage 

Use `ciao-serve-mt` (`ciao-serve` will not work, see **NOTE** below)
expose the current workspaces to the web server and browse
`http://localhost:8001/playground/`.

**NOTE**: Loading WASM-based applications from single threaded HTTP
servers seem to cause deadlocks in some browsers (it is not our
fault). The `ciao-serve-mt` module wraps a Python3 multi-threaded HTTP
server (which seems to work properly) with a `ciao-serve`-like
interface.

**NOTE**: When developing, it is sometimes convenient to [bypass your
cache](https://en.wikipedia.org/wiki/Wikipedia:Bypass_your_cache).

## Documentation

This bundle includes an LPdoc [user's manual](doc/reference/) available
as the `ciao_playground` manual (use `ciao build --docs ciao_playground`
to (re)generate it). Browse 
http://localhost:8001/ciao/build/doc/ciao_playground.html to view it.

JavaScript code is documented separatelly using
[JSDoc](https://jsdoc.app). You may generate it using:
```
cd src/; jsdoc -c jsdoc-conf.json
```
The HTML documentation is generated in the `doc-js/` folder.
Install `jsdoc` with `npm install -g jsdoc` (or `npm install
--save-dev jsdoc` locally).
")).
info(ciao_playground,deps(ciaowasm)).
info(ciao_playground,deps(builder)).
info(ciao_playground,deps(ciaodbg)).
info(ciao_playground,manuals(ciao_playground,'ciao_playground.html')).
info(ciao_playground,url('https://github.com/ciao-lang/ciao_playground')).
bundle(ciao_chr).
info(ciao_chr,tags([])).
info(ciao_chr,title("CHR for Ciao")).
info(ciao_chr,desc("# CHR for Ciao

This is a port of the Leuven CHR System (Tom Schrijvers et al.)
for [Ciao](https://ciao-lang.org). 

Please consult [Constraint Handling Rules](https://dtai.cs.kuleuven.be/CHR/)
for more information about CHR.

")).
info(ciao_chr,url('https://github.com/ciao-lang/ciao_chr')).
bundle(testsuite).
info(testsuite,tags([])).
info(testsuite,title("A general test suite for Ciao")).
info(testsuite,desc("# A general test suite for Ciao

This is a general test suite for the Ciao language, its
implementation, and the integration of several of its tools and
components (that is, integration tests and benchmarks).

Tests here should allow measuring:

 - correctness of compiler, optimizer, analyzer, etc. (including
   parser, pretty print, output, ...)

 - performance (time, memory consumption) of the engine, runtime,
   libraries, compiler and analysis

 - comparison with other languages and Prolog implementations

**NOTE**: Do not include unit tests for particular libraries here.

**NOTE**: See the `iso_tests` bundle for a ISO standard testsuite

## Usage

Clone this repository into your workspace or install with `ciao get
testsuite`. Then run:
```sh
ciao test testsuite # run tests
ciao bench testsuite # run benchmarks
```
The `testsuite` bundle name is optional if you execute `ciao` from the
`testsuite` directory.

")).
info(testsuite,deps(ciaodbg)).
info(testsuite,url('https://github.com/ciao-lang/testsuite')).
bundle(ciaodbg).
info(ciaodbg,tags([main])).
info(ciaodbg,title("Some Debugging, Testing, and Profiling utilities for Ciao")).
info(ciaodbg,desc("# Some Debugging, Testing, and Profiling utilities for Ciao

This bundle groups a number of utilities that are useful for
debugging, testing, profiling, tracing, benchmarking, etc. Ciao
programs.

As other components in Ciao (like the documentation generator and the
static analyzer), some of the components of this bundle make use of
program assertions to obtain the specification of desired behaviors.

Some components of this bundle (e.g., the unit tests) are integrated
into the Emacs-based development environment (under the `CiaoDbg`
menu), and others in the Ciao builder (`ciao test` command). See the
reference manual for more information.
")).
info(ciaodbg,manuals(ciaodbg,'ciaodbg.html')).
info(ciaodbg,url('https://github.com/ciao-lang/ciaodbg')).
bundle(ociao).
info(ociao,tags([])).
info(ociao,manuals(ociao,'ociao.html')).
info(ociao,url('https://github.com/ciao-lang/ociao')).
bundle(cleandirs).
info(cleandirs,tags([])).
info(cleandirs,title("A Program to Help Cleaning your Directories")).
info(cleandirs,desc("# A Program to Help Cleaning your Directories

A simple program for traversing a directory tree and deciding which
files may be deleted in order to save space and not to lose
information.
")).
info(cleandirs,manuals(cleandirs,'cleandirs.html')).
info(cleandirs,url('https://github.com/ciao-lang/cleandirs')).
bundle(typeslib).
info(typeslib,tags([])).
info(typeslib,title("Regular Types Library")).
info(typeslib,desc("# Regular Types Library

This library implements basic routines for storing and manipulating
regular types. These operations are used in CiaoPP domains, analysis,
and program transformations.

The main library module is `typeslib.pl`. See
`typeslib(typeslib_hooks)` and `typeslib_flag/1` for hooks defining
the library parameters. The interface to this library is defined by
the following predicates:

 - Initialization, cleanup, serialization: `post_init_types/0`,
   `cleanup_types/0`, `gen_lib_type_info/1`, `load_lib_type_info/1`,
   `cleanup_lib_type_info/0`, `dump_types/2`, `restore_types/2`.

 - Transform from/to predicate (property) notation:
   `legal_user_type_pred/1`, `insert_user_type_pred_def/2`,
   `pretty_type_lit_rules/4`, `pretty_type_lit_rules_desimp/2`,
   `typedef_to_pred/3`, `revert_type_internal/3`, `revert_types/5`
   (requires `revert_type_internal/3`).

 - Type creation (as an object in the type db):
   `create_new_type_rule/2` (`new_type_symbol/1`+`insert_rule/2`),
   `new_type_symbol/1`, `insert_rule/2`, `normalize_type/2` (ensure
   that it is a type symbol), `type_escape_term_list/2`
   (`escaped_type/2` on a list), `make_prop_type_unary/2`.
  
 - Basic elements of the type lattice: `pure_type_term/1` (prop),
   `native_type_symbol/1`, `set_atom_type/1`, `set_float_type/1`,
   `set_ground_type/1`, `set_int_type/1`, `set_numeric_type/1`,
   `set_numexp_type/1`, `top_type/1`, `set_top_type/1`, `var_type/1`,
   `set_var_type/1`, `bot_type/1`, `set_bottom_type/1`,
   `compound_pure_type_term/4`, `construct_compound_pure_type_term/2`.

 - Inspect type definition: `get_type_definition/2`,
   `maybe_get_type_definition/2`.

 - Type name annotations (for structural widening): `get_type_name/2`,
   `insert_type_name/3` `new_type_name/1`, `retract_type_name/3`,
   `get_canonical_name/2`, `get_equiv_name/2`, `insert_equiv_name/2`,
   `retract_equiv_name/2`, `lab_intersect/2`.

 - Widening operators: `approx_as_defined/2`, `ewiden_el/5`,
   `hentenwid/3`, `lnewiden_el/4`, `lnewiden_el_VR/4`,
   `shortening_el/3`, `terms_naive_ewiden_el/2`,
   `get_less_numeric_type/2`.

 - Union and intersection of types: `type_intersection_0/3`,
   `type_intersection_2/3`, `type_intersection_2_VR/3`,
   `def_type_lub/3`, `resetunion/0`, `resetunion_VR/0`,
   `type_union/3`, `type_union_NoDB/4`, `type_union_VR/3`,
   `def_type_glb/3`.

 - Type inclusion and equivalence: `dz_type_included/2`,
   `edz_type_included/5` (for sized types, depends on multifile
   `edz_postprocess_relations/4`), `dz_equivalent_types/2` (based on
   `dz_type_included/2`) `def_subtype/2`, `def_equivalent_types/2`
   (based on `def_subtype/2`), `set_param_matching_mode/1`,
   `belongs_to_type/2` (`escaped_type/2`+`dz_type_included/2`).

 - Other checks and operations on types: `is_empty_type/1`,
   `is_ground_type/1`, `concrete/4`, `partial_concrete/4`,
   `equivalent_to_top_type/1`, `equivalent_to_numeric/1`,
   `contains_type_param/1`, `get_compatible_types/4`,
   `find_type_functor/5` (see `get_compatible_types/4`),
   `is_infinite_type/1`, `finite_unfold/2`, `not_expandible_type/1`.

 - Garbage collection and simplification of types:
   `assert_required_type/1`, `get_required_types/1` (postprocess in
   `typedef(::=(_,_))` format), `simplify_step2/0`, `equiv_type/2`
   (representative type after simplification),
   `replace_non_par_rule_type_symbol/2` (obtain the corresponding
   parametric type symbol)

 - Debugging: `show_types/0`, `show_types_raw_printer/0`.

Other experimental features:

 - Random sampling (`typeslib(rnd_type_value)`): `rnd_type_value/2`
   (see multifile hooks)
")).
info(typeslib,url('https://github.com/ciao-lang/typeslib')).
bundle(core).
info(core,tags([min])).
info(core,title("Ciao compiler and standard libraries")).
info(core,desc("# Ciao compiler and standard libraries

This bundle contains the compiler and Ciao standard libraries.
Together with the `builder` bundle, it can be used as a *minimal* Ciao
installation.

Code is organized as follows:

```
  bootstrap/    bootstrap compiler (bytecode and auto-generated C)
  ciaoc/        main module for the compiler command-line
  shell/        main module for the Ciao toplevel
  cmds/         other command-line tools
  engine/       Ciao modules and C code for the engine
  lib/          essential libraries
                (including the compiler and toplevel)
  library/      additional standard libraries
```

See the `INSTALLATION` file for detailed installation instructions.

")).
info(core,manuals(ciao_internals,'ciao_internals.html')).
info(core,url('https://github.com/ciao-lang/ciao')).
bundle(synch_actions).
info(synch_actions,tags([])).
info(synch_actions,title("Synchronize two directories")).
info(synch_actions,desc("# Synchronize two directories

A simple program that determines which actions and on which files must
be done in order to update *old dir* to be *new dir*.
")).
info(synch_actions,manuals(synch_actions,'synch_actions.html')).
info(synch_actions,url('https://github.com/ciao-lang/synch_actions')).
bundle(mycin).
info(mycin,tags([])).
info(mycin,title("MYCIN-style inference")).
info(mycin,desc("# MYCIN-style inference

This library enables
[MYCIN](https://en.wikipedia.org/wiki/Mycin)-style inference using
""certainty factors"" on rules.

Example (using `examples/age.pl`):
```
?- use_package(mycin).
?- use_module(age).
?- senior(X) cf CF.

CF = -0.8,
X = angel ? ;

CF = -0.6656,
X = frank ? ;

CF = 1.0,
X = uncle_tom ? ;
```

See files at `examples/` for more examples.
")).
info(mycin,manuals(mycin,'mycin.html')).
info(mycin,url('https://github.com/ciao-lang/mycin')).
bundle(ciao_tcltk).
info(ciao_tcltk,tags([])).
info(ciao_tcltk,title("Bidirectional Tcl/Tk interface for Ciao")).
info(ciao_tcltk,desc("# Bidirectional Tcl/Tk interface for Ciao

See reference manual for usage and examples.
")).
info(ciao_tcltk,manuals(ciao_tcltk,'ciao_tcltk.html')).
info(ciao_tcltk,url('https://github.com/ciao-lang/ciao_tcltk')).
bundle(ciao_ppl).
info(ciao_ppl,tags([])).
info(ciao_ppl,title("Ciao bindings for the PPL")).
info(ciao_ppl,desc("# Ciao bindings for the PPL

This bundle implements the Ciao bindings for the
[Parma Polyhedra Library](http://bugseng.com/products/ppl).

NOTE: The directory `lib/ppl/X_X/` contains a set of glue code files
automatically generated by PPL X.X. Some of these files are
copyrighted by PPL's authors and distributed under the GPL license.

Usage (this will install third-party code if missing):
```
$ ciao get ciao_ppl
```

Building PPL from source requires the following components: `libtool`,
`automake`, `autoconf`, and a C++ compiler such as `g++` or `clang`.
")).
info(ciao_ppl,url('https://github.com/ciao-lang/ciao_ppl')).
bundle(ciao_java).
info(ciao_java,tags([])).
info(ciao_java,title("Ciao/Java Bidirectional Interface")).
info(ciao_java,desc("# Ciao/Java Bidirectional Interface

See documenation for more details and usage.
")).
info(ciao_java,manuals(ciao_java,'ciao_java.html')).
info(ciao_java,url('https://github.com/ciao-lang/ciao_java')).
bundle(davinci).
info(davinci,tags([])).
info(davinci,manuals(davinci,'davinci.html')).
info(davinci,url('https://github.com/ciao-lang/davinci')).
bundle(ciaomath).
info(ciaomath,tags([])).
info(ciaomath,title("Mathematical libraries")).
info(ciaomath,desc("# Mathematical libraries

This is a preliminary (incomplete and simple) set of libraries for
numeric and scientific computation for Ciao.

See manual for more details.




")).
info(ciaomath,manuals(ciaomath,'ciaomath.html')).
info(ciaomath,url('https://github.com/ciao-lang/ciaomath')).
bundle(wui).
info(wui,tags([])).
info(wui,title("WUI: Web-based User Interface components for Ciao")).
info(wui,desc("# WUI: Web-based User Interface components for Ciao

Components for creating Web-based (HTML and JavaScript) user interfaces
using Ciao active modules.

Used from `ciao-serve` command, predicates from active modules can
answer HTTP requests for HTML documents or AJAX requests (for
JavaScript interaction). We include a simple JavaScript driver for
interaction with active modules.

Additionally this bundle contains support libraries for building
*menus*, *playgrounds*, etc. required by other Ciao components.

## Build
    
This code depends on some third-party tools and libraries. You can use
this script to install them:
```	
$ ciao custom_run . fetch_externals
```
Then you can build the bundle with:
```	
$ ciao build
$ ciao custom_run . dist
```

# TODO:

 - Document and integrate better the generic JS framework for remote
   procedure calls (using active modules and a HTTP/CGI to JSON
   gateway program).

 - Allow client-side Prolog processes using `ciaowasm` (bundle)

 - `FormData()` is very limited on Safari. There is no simple
   workaroud, except creating a single form for upload and obtaining
   flag values without the form.

 - This code contains a generic JS framework for creating user
   interfaces (based on `library(menu)`, and external components like
   `CodeMirror`).


")).
info(wui,manuals(wui,'wui.html')).
info(wui,url('https://github.com/ciao-lang/wui')).
bundle(iso_tests).
info(iso_tests,tags([])).
info(iso_tests,title("ISO Prolog tests for Ciao")).
info(iso_tests,desc("# ISO Prolog tests for Ciao

This is a ISO Prolog conformance test for Ciao.

## Usage

Clone this repository into your workspace or install with `ciao get
iso_tests`. Then run:
```sh
ciao test iso_tests
```

")).
info(iso_tests,deps(ciaodbg)).
info(iso_tests,manuals(iso_tests,'iso_tests.html')).
info(iso_tests,url('https://github.com/ciao-lang/iso_tests')).
bundle(gendot).
info(gendot,tags([])).
info(gendot,title("Graphviz DOT generator")).
info(gendot,desc("# Graphviz DOT generator

This bundle allows the definition of graphs in
[Graphviz](http://www.graphviz.org/)'s DOT language.

DOT files can be rendered with the `dot` tool (Graphviz) or other
`dot` conversion tool such as
[dot2tex](https://github.com/kjellmf/dot2tex)
")).
info(gendot,manuals(gendot,'gendot.html')).
info(gendot,url('https://github.com/ciao-lang/gendot')).
bundle(poly_clpq).
info(poly_clpq,tags([])).
info(poly_clpq,title("Closed Rational Polyhedra based on CLP(Q)")).
info(poly_clpq,desc("# Closed Rational Polyhedra based on CLP(Q)

This module implements a (rational, closed) polyhedra manipulation
library based on CLP(Q) operations.

The algorithms for the convex hull and project operations are based on
the paper:
```
""Computing convex hulls with a linear solver"", Florence Benoy, Andy
King, Frédéric Mesnard.  TPLP 5(1-2): 259-271 (2005).
```

This implementation is guaranteed to work for closed polyhedra
(containing only non-strict inequalities).

See the `poly_clpq.pl` module documentation for usage.


")).
info(poly_clpq,url('https://github.com/ciao-lang/poly_clpq')).
bundle(website).
info(website,tags([])).
info(website,title("The Ciao Website")).
info(website,desc("# The Ciao Website

This bundle contains the sources for the Ciao website. The file
structure is as follows:

```
Manifest/           Manifest for this bundle
                    (includes some building code)
src/                Website contents in LPdoc format.
skel/               Additional website files
                    (images, CSS files, etc.).
```

The original sources (including alternative versions) of the logos and
images in this repository are stored separately in the `ciao-artwork`
repository.

## Installation

This bundle requires a few additional steps to fetch external
dependencies and prepare the website files under
`CIAOROOT/build/site/` directory.

First make sure that the `wui` bundle is built and installed:
```
ciao custom_run wui fetch_externals
ciao build --bin wui
ciao custom_run wui dist
```
Then build and install the website:
```
ciao custom_run website fetch_externals
ciao build --bin website
ciao custom_run website dist
```

NOTE: The metadata for the bundle catalog is pre-generated in the
`cached_catalog.pl` file. Use `bundle_extra_info:gen_catalog` to
generate it.

## Serving the website (browser-side dynamic content)

Use any HTTP server with root at `CIAOROOT/build/site/`. This requires
additional steps to build `ciaowasm` and `ciao_playground` bundles.

```
ciao build --grade=wasm website
ciao install --grade=wasm website
```

## Serving the website (server-side dynamic content)

Use the `ciao-serve` command to start a simple HTTP server at
`http://localhost:8000` with support for dynamic content. It can be
customized to listen from another address and port or be combined with
other HTTP servers a reverse proxy (see Deployment instructions
later).

Data from the dynamic components of the website will be locally stored
at the `CIAOROOT/build/data/` directory.

")).
info(website,deps(lpdoc)).
info(website,deps(ciao_playground)).
info(website,url('https://github.com/ciao-lang/website')).
bundle(ciaopp_tests).
info(ciaopp_tests,tags([])).
info(ciaopp_tests,title("Test for CiaoPP")).
info(ciaopp_tests,desc("# Test for CiaoPP

**Note**: This testsuite is not complete, please, contact us for other CiaoPP
features.

## Requirements

[Ciao](https://github.com/ciao-lang/ciao) (installed from git repository with `./ciao-boot.sh local-install`)
[CiaoPP](https://github.com/ciao-lang/ciaopp), installed with:
```sh
$ ciao get ciaopp
```

All code will be downloaded and built under the first directory
specified in the `CIAOPATH` environment variable or `~/.ciao` by
default.

## Download
You can automatically fetch the tests with:
```sh
ciao get ciaopp_tests
```
or clone this repository under your `CIAOPATH` directory.

## Available tests
- [Incremental analysis](tests/incanal/README.md)
")).
info(ciaopp_tests,deps(ciaopp)).
info(ciaopp_tests,deps(ciaopp_extra)).
info(ciaopp_tests,manuals(ciaopp_tests,'ciaopp_tests.html')).
info(ciaopp_tests,url('https://github.com/ciao-lang/ciaopp_tests')).
bundle(tclp).
info(tclp,tags([])).
info(tclp,title("TCLP - tabled constraint logic programming")).
info(tclp,desc("# TCLP - tabled constraint logic programming

This bundle contains several interfaces/framework based on tabled constraint logic programming:

* `tclp_aggregates`: is a framework to incrementally compute aggregates using TCLP:
    * Details about its design, expressiveness and syntax are described in the paper:
    ``
    J. Arias, M. Carro, ""Incremental Evaluation of Lattice-Based Aggregates in Logic Programming Using Modular TCLP""
    ``
* `tclp_ground`: is a framework to compute entailment/join of herbrand
terms using TCLP:
    * It has been used to reimplement PLAI, the fixpoint used by
      CiaoPP. Details about its design, expressiveness and syntax are
      described in the paper:
      ``
      J. Arias, M. Carro, ""Evaluation of the Implementation of an Abstract Interpretation Algorithm using Tabled CLP""
      ``
* `difference_constraint`: is a constraint domain written in `C` with a TCLP interface.
* `t_clpq`: is the TCLP interface of CLP(Q).
* `t_clpr`: is the TCLP interface of CLP(R).

Some packages in this bundler are experimental and needs some improvements:
* `abs_interval`, `abs_solver` and `clp_lattice`: are experimental constraint domain to be used in with an abstract interpreter under TCLP.

# Examples
Some examples of the use of TCLP with different constraint domains are included under the `examples/` directory.

Other examples related with a framework available in this bundler are included under a specific directory of its corresponding directory (e.g., see `tclp_aggregate/example` for examples of the tclp_aggregate framework).
")).
info(tclp,url('https://github.com/ciao-lang/tclp')).
bundle(ciao_gsl).
info(ciao_gsl,tags([])).
info(ciao_gsl,title("Ciao bindings for GSL")).
info(ciao_gsl,desc("# Ciao bindings for GSL

This bundle implements the Ciao bindings for the
[The GNU Scientific Library (GSL)](https://www.gnu.org/software/gsl/).
The GSL provides a large number of mathematical routines. See the
original documentation for more details.

NOTE: These bindings cover only a subset of the functionality provided
by GSL. If you need any functionality that is missing here, please
request it to the maintainers of these bindings.

Usage (this will install third-party code if missing):
```
$ ciao get ciao_gsl
```

")).
info(ciao_gsl,deps(ciaomath)).
info(ciao_gsl,url('https://github.com/ciao-lang/ciao_gsl')).
bundle(deepfind).
info(deepfind,tags([])).
info(deepfind,title("Code search based on abstract interpretation")).
info(deepfind,desc("# Code search based on abstract interpretation

Deepfind is a bundle for the Ciao System which allows finding code in
set of modules defined by the user by specifying abstract semantic
characteristics of the arguments of the predicates.

See the manual for more details.

Note: this is work in progress (see TODO.md file)

## Build and installation

You can automatically fetch, build, and install this bundle using:

```sh
ciao get deepfind
```

This command stores the source and generates the binaries in the Ciao
_workspace directory_. This directory is given by the value of the
`CIAOPATH` environment variable (or `~/.ciao` if unspecified).

Binaries are placed in the `$CIAOPATH/build/bin` directory (or
`~/.ciao/build/bin`). To call a binary without specifying its full
path it is recommended to include this directory in your `PATH`:

```sh
export PATH=$CIAOPATH/build/bin:$PATH
# or export PATH=~/.ciao/build/bin:$PATH
```

**For developing** this bundle it is recommended to define `CIAOPATH`
(E.g., `~/ciao`) and clone this repository in your workspace. Remember to 
update registered bundles after cloning (E.g., `ciao rescan-bundles ~/ciao`).

## Usage

Usage:
```ciao
?- use_package(deepfind(deepfind)).
```

Selection of the search context:
```ciao
find_add_mod(<<path>>).% Add one module to the search
find_add_dir(<<path>>). % (or) add one directory for search
find_add_bundle(<<bundle name>>). % (or) add one bundle for search
```

To pre-analize the selected modules you may use:
```ciao
?- analyze_search_modules([]).
```
where the first argument are the options:
     * `no_incremental`: redo analysis for all modules
       (otherwise only those whose modification data has changed are
        reanalized -- note that this heuristic is incomplete)

Then:
```ciao
?- findp(Asrts, P, Residue, Status). % To enumerate predicates
```

Example:
```ciao
?- use_package(deepfind(deepfind)).
?- analyze_search_modules([]). 
?- findp({ :- pred P(A) => atm(A). }, Pred, Residue, Status). 
?- findp({ :- apropos('.*'). }, Pred, Residue, Status).
```
")).
info(deepfind,deps(ciaopp)).
info(deepfind,manuals(deepfind,'deepfind.html')).
info(deepfind,url('https://github.com/ciao-lang/deepfind')).
bundle(alldocs).
info(alldocs,tags([main])).
info(alldocs,title("General Ciao documentation")).
info(alldocs,desc("# General Ciao documentation

This bundle contains manuals that put together the documentation for
the Ciao language, implementation, tools, and other relevant bundles.

See [Manifest.pl](Manifest/Manifest.pl) for details.



")).
info(alldocs,deps(lpdoc)).
info(alldocs,deps(ciaodbg)).
info(alldocs,deps(ciao_emacs)).
info(alldocs,manuals(ciao,'ciao.html')).
info(alldocs,manuals(ciao_devel,'ciao_devel.html')).
info(alldocs,url('https://github.com/ciao-lang/alldocs')).
bundle(builder).
info(builder,tags([min])).
info(builder,title("Ciao Builder: build automation for Ciao")).
info(builder,desc("# Ciao Builder: build automation for Ciao

See `doc/` for usage and detailed documentation regarding the Ciao
Builder.

This build system is mostly written in Ciao, with the exception of
some shell script code needed to bootstrap, perform platform-dependent
configuration, and interact with existing C compilers to generate
native code.

Code is organized as follows:

```
  cmds/         command-line builder, in Ciao
  src/          Ciao source of the builder modules
  sh_boot/      sh scripts for bootstrap
  sh_src/       sh scripts for incremental native code build and
                platform-dependent configuration
```

All shell scripts are POSIX (`/bin/sh`) portable. Additional
dependencies are some modern C compiler (like GCC or clang/LLVM), GNU
binutils, and GNU make. Code at `sh_boot/` should only be needed
during first build, while code under `sh_src/` is needed if you wish
Ciao to compile to native code (executables, shared or dynamic
libraries).

# Portability notes

Porting to non-POSIX systems would require specific versions of code
in `sh_boot/` and `sh_src/`. Keep code at `sh_src/` as simple as
possible and do not try to port it to Prolog:

 - Code at `sh_src/` is needed for `sh_boot/` (so we will have
   duplicates)
 - No additional dependency would be removed from those required by
   the C toolchain.

")).
info(builder,manuals(ciao_builder,'ciao_builder.html')).
info(builder,url('https://github.com/ciao-lang/ciao')).
bundle(provrml).
info(provrml,tags([])).
info(provrml,manuals(provrml,'provrml.html')).
info(provrml,url('https://github.com/ciao-lang/provrml')).
bundle(ciaofmt).
info(ciaofmt,tags([main])).
info(ciaofmt,title("Automatic source code formatting")).
info(ciaofmt,desc("# Automatic source code formatting

This bundle implements source code formatting and style checking for
Ciao (and Prolog) source code.

**NOTE**: Use with care. Checks that the output file is syntactically
equivalent to the input are not currently implemented.

")).
info(ciaofmt,url('https://github.com/ciao-lang/ciaofmt')).
bundle(chat80).
info(chat80,tags([])).
info(chat80,title("Chat-80 port to Ciao")).
info(chat80,desc("# Chat-80 port to Ciao

This is a port of Chat-80 to Ciao packaged as a Ciao bundle. It can
be installed with:

    $ ciao get github.com/ciao-lang/chat80

Then it can be started with:

    $ chat80

Chat-80 was a prototype natural language question answering system
developed by David H. D. Warren and Fernando Pereira in 1982. See
the original [paper][1] for a more detailed description (recovered from the
[web archive](https://web.archive.org/web/*/http://acl.ldc.upenn.edu/J/J82/J82-3002.pdf)).

[1]: doc/J82-3002.pdf
")).
info(chat80,manuals(chat80,'chat80.html')).
info(chat80,url('https://github.com/ciao-lang/chat80')).
bundle(ciaowasm).
info(ciaowasm,tags([])).
info(ciaowasm,title("CiaoWasm - Ciao compiled to WebAssembly")).
info(ciaowasm,desc("# CiaoWasm - Ciao compiled to WebAssembly

This bundle provides a Ciao engine compiled to WebAssembly
[Emscripten](https://emscripten.org/docs/getting_started/downloads.html).

It also provides:

 - The `wasm` build grade (see `src_builder/`), necessary to pack and
   distribute bundles for this backend.

 - A **high-level JS client** to the Ciao engine, which is able to run
   queries and collect solutions. See `ciaowasm.pl` for internal
   details.

## Build

Install and enable
[Emscripten](https://emscripten.org/docs/getting_started/downloads.html)
SDK (EMSDK). Then use the `build.sh` script to prepare a build. Build
and installation will populate the `build/site/` directory at the
current workspace.

### Documentation of JavaScript bindings

Documentation of JavaScript bindings is auto-generated using
[JSDoc](https://jsdoc.app).

```
jsdoc -c Manifest/jsdoc-conf.json
```

The HTML documentation will be generated in the `doc/js/` folder.
Install `jsdoc` with `npm install -g jsdoc` (or `npm install
--save-dev jsdoc` locally).

## Caveats

 - Operations repending on blocking IO (like console interaction) are
   not handled nicely in
   Emscripten. [Asyncify](https://emscripten.org/docs/porting/asyncify.html)
   may be considered as an option but we must study its impact on
   performance (but it is written to be large and slow without `-O3`).
")).
info(ciaowasm,manuals(ciaowasm,'ciaowasm.html')).
info(ciaowasm,url('https://github.com/ciao-lang/ciaowasm')).
bundle(ciao_gui).
info(ciao_gui,tags([])).
info(ciao_gui,title("Launcher of Ciao GUI applications")).
info(ciao_gui,desc("# Launcher of Ciao GUI applications

This bundle provides a launcher of cross platform GUI desktop
applications for Ciao based on HTML/CSS/Javascript technology.

It supports the following backends:

 - The [Electron](https://electron.atom.io/) framework (itself based
   on [Node](https://nodejs.org),
   [Chromium](http://www.chromium.org/Home), and
   [V8](https://developers.google.com/v8/))

 - Any modern available Web browser (as fallback)

## Build
    
This code depends on some third-party tools and libraries. You can use
this script to install them:
```	
$ ciao custom_run . fetch_externals
```
Then you can build the bundle with:
```	
$ ciao build
```

## Usage

Execute with `ciao-gui <Cmd>`. Use the `--server` option to start in
server mode (needs external browser).

See also the `ciao-serve` command for serving Web applications.
")).
info(ciao_gui,manuals(ciao_gui,'ciao_gui.html')).
info(ciao_gui,url('https://github.com/ciao-lang/ciao_gui')).
